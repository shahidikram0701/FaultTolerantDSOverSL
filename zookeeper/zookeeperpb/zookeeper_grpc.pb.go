// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: zookeeper.proto

package zookeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZooKeeperClient is the client API for ZooKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZooKeeperClient interface {
	CreateZNode(ctx context.Context, in *ZNode, opts ...grpc.CallOption) (*Path, error)
	DeleteZNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Empty, error)
	ExistsZNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Stat, error)
	GetZNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*ZNode, error)
	SetZNode(ctx context.Context, in *SetZNodeRequest, opts ...grpc.CallOption) (*Stat, error)
	GetZNodeChildren(ctx context.Context, in *Path, opts ...grpc.CallOption) (*GetZNodeChildrenResponse, error)
}

type zooKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewZooKeeperClient(cc grpc.ClientConnInterface) ZooKeeperClient {
	return &zooKeeperClient{cc}
}

func (c *zooKeeperClient) CreateZNode(ctx context.Context, in *ZNode, opts ...grpc.CallOption) (*Path, error) {
	out := new(Path)
	err := c.cc.Invoke(ctx, "/zookeeper.ZooKeeper/CreateZNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zooKeeperClient) DeleteZNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/zookeeper.ZooKeeper/DeleteZNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zooKeeperClient) ExistsZNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/zookeeper.ZooKeeper/ExistsZNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zooKeeperClient) GetZNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*ZNode, error) {
	out := new(ZNode)
	err := c.cc.Invoke(ctx, "/zookeeper.ZooKeeper/GetZNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zooKeeperClient) SetZNode(ctx context.Context, in *SetZNodeRequest, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/zookeeper.ZooKeeper/SetZNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zooKeeperClient) GetZNodeChildren(ctx context.Context, in *Path, opts ...grpc.CallOption) (*GetZNodeChildrenResponse, error) {
	out := new(GetZNodeChildrenResponse)
	err := c.cc.Invoke(ctx, "/zookeeper.ZooKeeper/GetZNodeChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZooKeeperServer is the server API for ZooKeeper service.
// All implementations must embed UnimplementedZooKeeperServer
// for forward compatibility
type ZooKeeperServer interface {
	CreateZNode(context.Context, *ZNode) (*Path, error)
	DeleteZNode(context.Context, *Path) (*Empty, error)
	ExistsZNode(context.Context, *Path) (*Stat, error)
	GetZNode(context.Context, *Path) (*ZNode, error)
	SetZNode(context.Context, *SetZNodeRequest) (*Stat, error)
	GetZNodeChildren(context.Context, *Path) (*GetZNodeChildrenResponse, error)
	mustEmbedUnimplementedZooKeeperServer()
}

// UnimplementedZooKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedZooKeeperServer struct {
}

func (UnimplementedZooKeeperServer) CreateZNode(context.Context, *ZNode) (*Path, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZNode not implemented")
}
func (UnimplementedZooKeeperServer) DeleteZNode(context.Context, *Path) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZNode not implemented")
}
func (UnimplementedZooKeeperServer) ExistsZNode(context.Context, *Path) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsZNode not implemented")
}
func (UnimplementedZooKeeperServer) GetZNode(context.Context, *Path) (*ZNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZNode not implemented")
}
func (UnimplementedZooKeeperServer) SetZNode(context.Context, *SetZNodeRequest) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetZNode not implemented")
}
func (UnimplementedZooKeeperServer) GetZNodeChildren(context.Context, *Path) (*GetZNodeChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZNodeChildren not implemented")
}
func (UnimplementedZooKeeperServer) mustEmbedUnimplementedZooKeeperServer() {}

// UnsafeZooKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZooKeeperServer will
// result in compilation errors.
type UnsafeZooKeeperServer interface {
	mustEmbedUnimplementedZooKeeperServer()
}

func RegisterZooKeeperServer(s grpc.ServiceRegistrar, srv ZooKeeperServer) {
	s.RegisterService(&ZooKeeper_ServiceDesc, srv)
}

func _ZooKeeper_CreateZNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZooKeeperServer).CreateZNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zookeeper.ZooKeeper/CreateZNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZooKeeperServer).CreateZNode(ctx, req.(*ZNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZooKeeper_DeleteZNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZooKeeperServer).DeleteZNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zookeeper.ZooKeeper/DeleteZNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZooKeeperServer).DeleteZNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZooKeeper_ExistsZNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZooKeeperServer).ExistsZNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zookeeper.ZooKeeper/ExistsZNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZooKeeperServer).ExistsZNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZooKeeper_GetZNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZooKeeperServer).GetZNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zookeeper.ZooKeeper/GetZNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZooKeeperServer).GetZNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZooKeeper_SetZNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetZNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZooKeeperServer).SetZNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zookeeper.ZooKeeper/SetZNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZooKeeperServer).SetZNode(ctx, req.(*SetZNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZooKeeper_GetZNodeChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZooKeeperServer).GetZNodeChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zookeeper.ZooKeeper/GetZNodeChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZooKeeperServer).GetZNodeChildren(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

// ZooKeeper_ServiceDesc is the grpc.ServiceDesc for ZooKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZooKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zookeeper.ZooKeeper",
	HandlerType: (*ZooKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateZNode",
			Handler:    _ZooKeeper_CreateZNode_Handler,
		},
		{
			MethodName: "DeleteZNode",
			Handler:    _ZooKeeper_DeleteZNode_Handler,
		},
		{
			MethodName: "ExistsZNode",
			Handler:    _ZooKeeper_ExistsZNode_Handler,
		},
		{
			MethodName: "GetZNode",
			Handler:    _ZooKeeper_GetZNode_Handler,
		},
		{
			MethodName: "SetZNode",
			Handler:    _ZooKeeper_SetZNode_Handler,
		},
		{
			MethodName: "GetZNodeChildren",
			Handler:    _ZooKeeper_GetZNodeChildren_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zookeeper.proto",
}
